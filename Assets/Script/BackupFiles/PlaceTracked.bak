using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;
using EnhancedTouch = UnityEngine.InputSystem.EnhancedTouch;
using TMPro;

[RequireComponent(typeof(ARTrackedImageManager), typeof(ARRaycastManager))]
public class PlaceTrackedImageOnTouch : MonoBehaviour
{
    //AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    /*
    [Serializable]
    public struct PrefabDetails
    {
        public GameObject Prefab;
        public string Details;
    }

    [SerializeField]
    private PrefabDetails[] ArPrefabsWithDetails;
    */
    //BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

    // referencing ARTrackedImageManager and ARRaycastManager Components
    private ARTrackedImageManager _trackedImagesManager;
    private ARRaycastManager _raycastManager;

    //array of gameobjects to be instantiated when a tracked image is touched
    public GameObject[] ArPrefabs;

    //list to store ARRaycast hits and tracked images
    private List<ARRaycastHit> hits = new List<ARRaycastHit>();
    private List<ARTrackedImage> trackedImages = new List<ARTrackedImage>();

    [SerializeField]
    private GameObject detailPanel;

    [SerializeField]
    private TextMeshProUGUI detailText;

    /*
    [SerializeField]
    private GameObject detailPanel;

    [SerializeField]
    private TextMeshProUGUI detailText;
    */

    //private Dictionary<string, GameObject> spawnedPrefabs = new Dictionary<string, GameObject>();
    // Define the threshold distance
    public float thresholdDistance = 0.1f;

    void Awake()
    {
        //get references to ARTrackedImageManager and ARRaycastManager components
        _trackedImagesManager = GetComponent<ARTrackedImageManager>();
        _raycastManager = GetComponent<ARRaycastManager>();

        //check if trackedimages is found
        if (_trackedImagesManager == null)
        {
            Debug.LogError("ARTrackedImageManager component not found.");
        }

        detailPanel.SetActive(false);
        /*
        foreach (GameObject prefab in ArPrefabs)
        {
            GameObject newPrefab = Instantiate(prefab, Vector3.zero, Quaternion.identity);
            newPrefab.name = prefab.name;
            spawnedPrefabs.Add(prefab.name, newPrefab);
            newPrefab.SetActive(false);
        }
        */

    }

    private void OnEnable()
    {
        if (_trackedImagesManager != null)
        {
            _trackedImagesManager.trackedImagesChanged += OnTrackedImagesChanged;
        }

        //enables touch fucntionalities
        Debug.Log("Test Button Work");
        EnhancedTouch.EnhancedTouchSupport.Enable();
        EnhancedTouch.TouchSimulation.Enable();
        EnhancedTouch.EnhancedTouchSupport.Enable();
        EnhancedTouch.Touch.onFingerDown += FingerDown;
    }

    private void OnDisable()
    {
        if (_trackedImagesManager != null)
        {
            _trackedImagesManager.trackedImagesChanged -= OnTrackedImagesChanged;
        }
        EnhancedTouch.EnhancedTouchSupport.Disable();
        EnhancedTouch.TouchSimulation.Disable();
        EnhancedTouch.EnhancedTouchSupport.Disable();
        EnhancedTouch.Touch.onFingerDown -= FingerDown;
    }

    private void OnTrackedImagesChanged(ARTrackedImagesChangedEventArgs eventArgs)
    {
        //handle each tracked image added
        foreach (ARTrackedImage trackedImage in eventArgs.added)
        {
            trackedImages.Add(trackedImage);
            //UpdateImage(trackedImage);
        }

        //handles removed tracked images
        foreach (ARTrackedImage trackedImage in eventArgs.removed)
        {
            trackedImages.Remove(trackedImage);
            //UpdateImage(trackedImage);
        }

        foreach (ARTrackedImage trackedImage in eventArgs.updated)
        {
            UpdateInfo(trackedImage);
        }
    }

    void UpdateInfo(ARTrackedImage trackedImage)
    {
        HoverInfo hoverInfo = trackedImage.GetComponent<HoverInfo>();
        if (hoverInfo != null)
        {
            string newDetails = "";
            switch (trackedImage.referenceImage.name)
            {
                case "CompInfo0":
                    newDetails = "null";
                    break;
                case "CompInfo1":
                    newDetails = "2k";
                    break;
            }
            hoverInfo.SetDetails(newDetails);
        }
    }
    /*
    private void UpdateImage(ARTrackedImage trackedImage)
    {

        string name = trackedImage.referenceImage.name;
        Vector3 position = trackedImage.transform.position;

        GameObject prefab = spawnedPrefabs[name];
        prefab.transform.position = position;
        prefab.SetActive(true);

        foreach (GameObject go in spawnedPrefabs.Values)
        {
            if (go.name != null)
            {
                go.SetActive(false);
            }
        }

    }
    */

    private void FingerDown(EnhancedTouch.Finger finger)
    {
        //check if finger index is 0 (first finger)
        if (finger.index != 0) return;

        //perform raycast from finger's current touch position onto tracked images
        if (_raycastManager.Raycast(finger.currentTouch.screenPosition, hits, TrackableType.Image))
        {

            foreach (ARRaycastHit hit in hits)
            {
                var hitObject = hit.trackable.transform;
                //var hitObject = hits[0].trackable.transform.gameObject;
                var hitInfo = hitObject.GetComponent<HoverInfo>();

                Pose pose = hit.pose;
                foreach (var trackedImage in trackedImages)
                {
                    if (Vector3.Distance(pose.position, trackedImage.transform.position) < thresholdDistance)
                    {
                        var imageName = trackedImage.referenceImage.name;
                        GameObject curPrefab = Array.Find(ArPrefabs, prefab => prefab.name == imageName);
                        //PrefabDetails curPrefabDetails = Array.Find(ArPrefabsWithDetails, prefabDetails => prefabDetails.Prefab.name == imageName);

                        if (curPrefab != null)
                        {
                            var newPrefab = Instantiate(curPrefab, pose.position, pose.rotation);


                            if (hitInfo != null)
                            {
                                // Show the details panel and set the text to the object's details
                                detailPanel.SetActive(true);
                                detailText.text = hitInfo.GetDetails();
                            }
                            // If the object is not interactive
                            else
                            {
                                // Hide the details panel
                                detailPanel.SetActive(false);
                            }


                            detailPanel.SetActive(true);

                            /*
                            var infoPanel = newPrefab.GetComponent<InfoPanel>();
                            if (infoPanel != null)
                            {
                                infoPanel.InfoText = "New Information for this instance";
                            }
                            */

                        }

                        /*
                        if (curPrefabDetails.Prefab != null)
                        {
                            var newPrefab = Instantiate(curPrefabDetails.Prefab, pose.position, pose.rotation);
                            var hoverInfo = newPrefab.AddComponent<HoverInfo>();
                            hoverInfo.SetDetails(curPrefabDetails.Details);
                        }
                        */
                    }
                }
                /*
                Pose pose = hit.pose;
                foreach (var trackedImage in trackedImages)
                {
                    if (Vector3.Distance(pose.position, trackedImage.transform.position) < thresholdDistance)
                    {
                        var imageName = trackedImage.referenceImage.name;
                        PrefabDetails curPrefabDetails = Array.Find(ArPrefabsWithDetails, prefabDetails => prefabDetails.Prefab.name == imageName);
                        if (curPrefabDetails.Prefab != null)
                        {
                            var newPrefab = Instantiate(curPrefabDetails.Prefab, pose.position, pose.rotation);
                            var hoverInfo = newPrefab.AddComponent<HoverInfo>();
                            hoverInfo.SetDetails(curPrefabDetails.Details);
                        }
                    }
                }
                */
            }


            //AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
            /*
            foreach (ARRaycastHit hit in hits)
            {
                
            }
            */

            //BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

        }



    }
}

/* IMAGE TRACKING SCRIPT
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR;
using UnityEngine.XR.ARFoundation;

[RequireComponent(typeof(ARTrackedImageManager))]
public class ImageTracking : MonoBehaviour
{
    [SerializeField]
    private GameObject[] placeablePrefabs;

    private Dictionary<string, GameObject> spawnedPrefabs = new Dictionary<string, GameObject>();
    private ARTrackedImageManager trackedImageManager;

    private void Awake()
    {
        trackedImageManager = FindObjectOfType<ARTrackedImageManager>();

        foreach (GameObject prefab in placeablePrefabs)
        {
            GameObject newPrefab = Instantiate(prefab, Vector3.zero, Quaternion.identity);
            newPrefab.name = prefab.name;
            spawnedPrefabs.Add(prefab.name, newPrefab);
        }
    }

    private void OnEnable()
    {
        trackedImageManager.trackedImagesChanged += ImageChanged;
    }

    private void OnDisable()
    {
        trackedImageManager.trackedImagesChanged -= ImageChanged;
    }
    private void ImageChanged(ARTrackedImagesChangedEventArgs eventArgs)
    {
        foreach (ARTrackedImage trackedImage in eventArgs.added)
        {
            UpdateImage(trackedImage);
        }
        foreach (ARTrackedImage trackedImage in eventArgs.updated)
        {
            UpdateImage(trackedImage);
        }
        foreach (ARTrackedImage trackedImage in eventArgs.removed)
        {
            spawnedPrefabs[trackedImage.name].SetActive(false);
        }
    }

    private void UpdateImage(ARTrackedImage trackedImage)
    {
        string name = trackedImage.referenceImage.name;
        Vector3 position = trackedImage.transform.position;

        GameObject prefab = spawnedPrefabs[name];
        prefab.transform.position = position;
        prefab.SetActive(true);

        foreach (GameObject go in spawnedPrefabs.Values)
        {
            if (go.name != name)
            {
                go.SetActive(false);
            }
        }
    }
}
*/
